type Query {
  getAllMessages(interlocutor: ID!): [Message]!
  getAllUsers: [User]!
  getChatById(
    chatId: ID!
  ): Chat!
  getDialogByUserIds(
    userIds: [ID]!
  ): Dialog!
  getMessagesByDialogId(
    dialogId: ID!
  ): [Message]!
  getUserDialogs: [Dialog]!
  login(
    login: String!
    password: String!
  ): User!
}

type Mutation {
  signup(
    username: String!
    email: String!
    password: String!
    confirmPassword: String!
    birthDate: DateTime
    firstName: String
  ): User!

  sendMessage(
    type: MessageTypes!
    chatId: String
    to: ID
    content: String!
    attachments: [String]
  ): Message!

  createDialog(
    interlocutorId: ID!
  ): Dialog!
  
  createChat(
    userIds: [String]!
    name: String
    imageUrl: String
  ): Chat!
}

type User {
  id: ID!
  username: String!
  token: String
  role: Role!
  createdAt: DateTime!
  updatedAt: DateTime!

  firstName: String!
  lastName: String
  birthDate: DateTime!
  age: Int!
  email: String!
  phoneNumber: String!
  locale: [Location]

  profileImage: URL
  gallery: [URL]

  friends: [User]

  chats: [Chat]
}

type Message {
  id: ID!
  type: MessageTypes!
  createdAt: DateTime!
  updatedAt: DateTime!
  
  from: ID!
  to: ID

  content: String!
  attachments: [String]
}

type Dialog {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!

  userIds: [ID]!
  messages: [Message]
  imageUrl: URL
}

type Chat {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!

  name: String

  participants: [User]!
  messages: [Message]

  moderators: [ID]!
  imageUrl: URL
}

type Location {
  country: Country!
  city: String
  # postCode: Int
  # coords:
}

enum Role {
  ADMIN
  USER
}

enum Country {
  BELARUS
  RUSSIA
  UKRAINE
  POLAND
}

enum MessageTypes {
  DIRECT
  CHAT
}

scalar DateTime
scalar URL
